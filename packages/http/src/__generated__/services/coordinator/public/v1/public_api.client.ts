/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */

import {
  fetch,
  GrpcStatus,
  THttpConfig,
  TSignedRequest,
  TStamper,
  TurnkeyRequestError,
} from "../../../../../base";
import type {
  TGetActivityBody,
  TGetActivityResponse,
} from "./public_api.fetcher";
import type {
  TGetAuthenticatorBody,
  TGetAuthenticatorResponse,
} from "./public_api.fetcher";
import type {
  TGetAuthenticatorsBody,
  TGetAuthenticatorsResponse,
} from "./public_api.fetcher";
import type {
  TGetOrganizationBody,
  TGetOrganizationResponse,
} from "./public_api.fetcher";
import type { TGetPolicyBody, TGetPolicyResponse } from "./public_api.fetcher";
import type {
  TGetPrivateKeyBody,
  TGetPrivateKeyResponse,
} from "./public_api.fetcher";
import type { TGetUserBody, TGetUserResponse } from "./public_api.fetcher";
import type {
  TGetActivitiesBody,
  TGetActivitiesResponse,
} from "./public_api.fetcher";
import type {
  TGetPoliciesBody,
  TGetPoliciesResponse,
} from "./public_api.fetcher";
import type {
  TGetPrivateKeysBody,
  TGetPrivateKeysResponse,
} from "./public_api.fetcher";
import type { TGetUsersBody, TGetUsersResponse } from "./public_api.fetcher";
import type { TGetWhoamiBody, TGetWhoamiResponse } from "./public_api.fetcher";
import type {
  TApproveActivityBody,
  TApproveActivityResponse,
} from "./public_api.fetcher";
import type {
  TCreateApiKeysBody,
  TCreateApiKeysResponse,
} from "./public_api.fetcher";
import type {
  TCreateApiOnlyUsersBody,
  TCreateApiOnlyUsersResponse,
} from "./public_api.fetcher";
import type {
  TCreateAuthenticatorsBody,
  TCreateAuthenticatorsResponse,
} from "./public_api.fetcher";
import type {
  TCreateInvitationsBody,
  TCreateInvitationsResponse,
} from "./public_api.fetcher";
import type {
  TCreatePolicyBody,
  TCreatePolicyResponse,
} from "./public_api.fetcher";
import type {
  TCreatePrivateKeyTagBody,
  TCreatePrivateKeyTagResponse,
} from "./public_api.fetcher";
import type {
  TCreatePrivateKeysBody,
  TCreatePrivateKeysResponse,
} from "./public_api.fetcher";
import type {
  TCreateSubOrganizationBody,
  TCreateSubOrganizationResponse,
} from "./public_api.fetcher";
import type {
  TCreateUserTagBody,
  TCreateUserTagResponse,
} from "./public_api.fetcher";
import type {
  TCreateUsersBody,
  TCreateUsersResponse,
} from "./public_api.fetcher";
import type {
  TDeleteApiKeysBody,
  TDeleteApiKeysResponse,
} from "./public_api.fetcher";
import type {
  TDeleteAuthenticatorsBody,
  TDeleteAuthenticatorsResponse,
} from "./public_api.fetcher";
import type {
  TDeleteInvitationBody,
  TDeleteInvitationResponse,
} from "./public_api.fetcher";
import type {
  TDeletePolicyBody,
  TDeletePolicyResponse,
} from "./public_api.fetcher";
import type {
  TRejectActivityBody,
  TRejectActivityResponse,
} from "./public_api.fetcher";
import type {
  TSignRawPayloadBody,
  TSignRawPayloadResponse,
} from "./public_api.fetcher";
import type {
  TSignTransactionBody,
  TSignTransactionResponse,
} from "./public_api.fetcher";
import type {
  TUpdateAllowedOriginsBody,
  TUpdateAllowedOriginsResponse,
} from "./public_api.fetcher";
import type {
  TUpdatePolicyBody,
  TUpdatePolicyResponse,
} from "./public_api.fetcher";
import type {
  TUpdatePrivateKeyTagBody,
  TUpdatePrivateKeyTagResponse,
} from "./public_api.fetcher";
import type {
  TUpdateRootQuorumBody,
  TUpdateRootQuorumResponse,
} from "./public_api.fetcher";
import type {
  TUpdateUserBody,
  TUpdateUserResponse,
} from "./public_api.fetcher";
import type {
  TUpdateUserTagBody,
  TUpdateUserTagResponse,
} from "./public_api.fetcher";

export class TurnkeyClient {
  config: THttpConfig;
  stamper: TStamper;

  constructor(config: THttpConfig, stamper: TStamper) {
    this.config = config;
    this.stamper = stamper;
  }
  async request<TBodyType, TResponseType>(
    url: string,
    input: TBodyType
  ): Promise<TResponseType> {
    const fullUrl = this.config.baseUrl + url;
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);

    const response = await fetch(fullUrl, {
      method: "POST",
      headers: {
        [stamp.stampHeaderName]: stamp.stampHeaderValue,
      },
      body: body,
      redirect: "follow",
    });

    if (!response.ok) {
      let res: GrpcStatus;
      try {
        res = await response.json();
      } catch (_) {
        throw new Error(`${response.status} ${response.statusText}`);
      }

      throw new TurnkeyRequestError(res);
    }

    const data = await response.json();
    return data as TResponseType;
  }

  /**
   * Get details about an Activity
   *
   * Sign the provided `TGetActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_activity).
   *
   * See also {@link stampGetActivity}.
   */
  async getActivity(input: TGetActivityBody): Promise<TGetActivityResponse> {
    return this.request("/public/v1/query/get_activity", input);
  }

  /**
   * Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.
   *
   * See also {@link GetActivity}.
   */
  async stampGetActivity(input: TGetActivityBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_activity";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Get details about an authenticator
   *
   * Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticator).
   *
   * See also {@link stampGetAuthenticator}.
   */
  async getAuthenticator(
    input: TGetAuthenticatorBody
  ): Promise<TGetAuthenticatorResponse> {
    return this.request("/public/v1/query/get_authenticator", input);
  }

  /**
   * Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.
   *
   * See also {@link GetAuthenticator}.
   */
  async stampGetAuthenticator(
    input: TGetAuthenticatorBody
  ): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_authenticator";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Get details about authenticators for a user
   *
   * Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticators).
   *
   * See also {@link stampGetAuthenticators}.
   */
  async getAuthenticators(
    input: TGetAuthenticatorsBody
  ): Promise<TGetAuthenticatorsResponse> {
    return this.request("/public/v1/query/get_authenticators", input);
  }

  /**
   * Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.
   *
   * See also {@link GetAuthenticators}.
   */
  async stampGetAuthenticators(
    input: TGetAuthenticatorsBody
  ): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_authenticators";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Get details about an Organization
   *
   * Sign the provided `TGetOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization).
   *
   * See also {@link stampGetOrganization}.
   */
  async getOrganization(
    input: TGetOrganizationBody
  ): Promise<TGetOrganizationResponse> {
    return this.request("/public/v1/query/get_organization", input);
  }

  /**
   * Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.
   *
   * See also {@link GetOrganization}.
   */
  async stampGetOrganization(
    input: TGetOrganizationBody
  ): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_organization";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Get details about a Policy
   *
   * Sign the provided `TGetPolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy).
   *
   * See also {@link stampGetPolicy}.
   */
  async getPolicy(input: TGetPolicyBody): Promise<TGetPolicyResponse> {
    return this.request("/public/v1/query/get_policy", input);
  }

  /**
   * Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.
   *
   * See also {@link GetPolicy}.
   */
  async stampGetPolicy(input: TGetPolicyBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_policy";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Get details about a Private Key
   *
   * Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_private_key).
   *
   * See also {@link stampGetPrivateKey}.
   */
  async getPrivateKey(
    input: TGetPrivateKeyBody
  ): Promise<TGetPrivateKeyResponse> {
    return this.request("/public/v1/query/get_private_key", input);
  }

  /**
   * Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.
   *
   * See also {@link GetPrivateKey}.
   */
  async stampGetPrivateKey(input: TGetPrivateKeyBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_private_key";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Get details about a User
   *
   * Sign the provided `TGetUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_user).
   *
   * See also {@link stampGetUser}.
   */
  async getUser(input: TGetUserBody): Promise<TGetUserResponse> {
    return this.request("/public/v1/query/get_user", input);
  }

  /**
   * Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.
   *
   * See also {@link GetUser}.
   */
  async stampGetUser(input: TGetUserBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_user";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * List all Activities within an Organization
   *
   * Sign the provided `TGetActivitiesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_activities).
   *
   * See also {@link stampGetActivities}.
   */
  async getActivities(
    input: TGetActivitiesBody
  ): Promise<TGetActivitiesResponse> {
    return this.request("/public/v1/query/list_activities", input);
  }

  /**
   * Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.
   *
   * See also {@link GetActivities}.
   */
  async stampGetActivities(input: TGetActivitiesBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/query/list_activities";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * List all Policies within an Organization
   *
   * Sign the provided `TGetPoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_policies).
   *
   * See also {@link stampGetPolicies}.
   */
  async getPolicies(input: TGetPoliciesBody): Promise<TGetPoliciesResponse> {
    return this.request("/public/v1/query/list_policies", input);
  }

  /**
   * Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.
   *
   * See also {@link GetPolicies}.
   */
  async stampGetPolicies(input: TGetPoliciesBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/query/list_policies";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * List all Private Keys within an Organization
   *
   * Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_keys).
   *
   * See also {@link stampGetPrivateKeys}.
   */
  async getPrivateKeys(
    input: TGetPrivateKeysBody
  ): Promise<TGetPrivateKeysResponse> {
    return this.request("/public/v1/query/list_private_keys", input);
  }

  /**
   * Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.
   *
   * See also {@link GetPrivateKeys}.
   */
  async stampGetPrivateKeys(
    input: TGetPrivateKeysBody
  ): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/query/list_private_keys";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * List all Users within an Organization
   *
   * Sign the provided `TGetUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_users).
   *
   * See also {@link stampGetUsers}.
   */
  async getUsers(input: TGetUsersBody): Promise<TGetUsersResponse> {
    return this.request("/public/v1/query/list_users", input);
  }

  /**
   * Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.
   *
   * See also {@link GetUsers}.
   */
  async stampGetUsers(input: TGetUsersBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/query/list_users";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Get basic information about your current API user and your organization
   *
   * Sign the provided `TGetWhoamiBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/whoami).
   *
   * See also {@link stampGetWhoami}.
   */
  async getWhoami(input: TGetWhoamiBody): Promise<TGetWhoamiResponse> {
    return this.request("/public/v1/query/whoami", input);
  }

  /**
   * Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.
   *
   * See also {@link GetWhoami}.
   */
  async stampGetWhoami(input: TGetWhoamiBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/query/whoami";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Approve an Activity
   *
   * Sign the provided `TApproveActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/approve_activity).
   *
   * See also {@link stampApproveActivity}.
   */
  async approveActivity(
    input: TApproveActivityBody
  ): Promise<TApproveActivityResponse> {
    return this.request("/public/v1/submit/approve_activity", input);
  }

  /**
   * Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.
   *
   * See also {@link ApproveActivity}.
   */
  async stampApproveActivity(
    input: TApproveActivityBody
  ): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/approve_activity";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Add api keys to an existing User
   *
   * Sign the provided `TCreateApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_keys).
   *
   * See also {@link stampCreateApiKeys}.
   */
  async createApiKeys(
    input: TCreateApiKeysBody
  ): Promise<TCreateApiKeysResponse> {
    return this.request("/public/v1/submit/create_api_keys", input);
  }

  /**
   * Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.
   *
   * See also {@link CreateApiKeys}.
   */
  async stampCreateApiKeys(input: TCreateApiKeysBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/create_api_keys";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Create API-only Users in an existing Organization
   *
   * Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_only_users).
   *
   * See also {@link stampCreateApiOnlyUsers}.
   */
  async createApiOnlyUsers(
    input: TCreateApiOnlyUsersBody
  ): Promise<TCreateApiOnlyUsersResponse> {
    return this.request("/public/v1/submit/create_api_only_users", input);
  }

  /**
   * Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.
   *
   * See also {@link CreateApiOnlyUsers}.
   */
  async stampCreateApiOnlyUsers(
    input: TCreateApiOnlyUsersBody
  ): Promise<TSignedRequest> {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_api_only_users";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Create Authenticators to authenticate requests to Turnkey
   *
   * Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_authenticators).
   *
   * See also {@link stampCreateAuthenticators}.
   */
  async createAuthenticators(
    input: TCreateAuthenticatorsBody
  ): Promise<TCreateAuthenticatorsResponse> {
    return this.request("/public/v1/submit/create_authenticators", input);
  }

  /**
   * Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.
   *
   * See also {@link CreateAuthenticators}.
   */
  async stampCreateAuthenticators(
    input: TCreateAuthenticatorsBody
  ): Promise<TSignedRequest> {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_authenticators";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Create Invitations to join an existing Organization
   *
   * Sign the provided `TCreateInvitationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_invitations).
   *
   * See also {@link stampCreateInvitations}.
   */
  async createInvitations(
    input: TCreateInvitationsBody
  ): Promise<TCreateInvitationsResponse> {
    return this.request("/public/v1/submit/create_invitations", input);
  }

  /**
   * Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.
   *
   * See also {@link CreateInvitations}.
   */
  async stampCreateInvitations(
    input: TCreateInvitationsBody
  ): Promise<TSignedRequest> {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_invitations";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Create a new Policy
   *
   * Sign the provided `TCreatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policy).
   *
   * See also {@link stampCreatePolicy}.
   */
  async createPolicy(input: TCreatePolicyBody): Promise<TCreatePolicyResponse> {
    return this.request("/public/v1/submit/create_policy", input);
  }

  /**
   * Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.
   *
   * See also {@link CreatePolicy}.
   */
  async stampCreatePolicy(input: TCreatePolicyBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/create_policy";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Create a private key tag and add it to private keys.
   *
   * Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_key_tag).
   *
   * See also {@link stampCreatePrivateKeyTag}.
   */
  async createPrivateKeyTag(
    input: TCreatePrivateKeyTagBody
  ): Promise<TCreatePrivateKeyTagResponse> {
    return this.request("/public/v1/submit/create_private_key_tag", input);
  }

  /**
   * Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.
   *
   * See also {@link CreatePrivateKeyTag}.
   */
  async stampCreatePrivateKeyTag(
    input: TCreatePrivateKeyTagBody
  ): Promise<TSignedRequest> {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_private_key_tag";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Create new Private Keys
   *
   * Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_keys).
   *
   * See also {@link stampCreatePrivateKeys}.
   */
  async createPrivateKeys(
    input: TCreatePrivateKeysBody
  ): Promise<TCreatePrivateKeysResponse> {
    return this.request("/public/v1/submit/create_private_keys", input);
  }

  /**
   * Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.
   *
   * See also {@link CreatePrivateKeys}.
   */
  async stampCreatePrivateKeys(
    input: TCreatePrivateKeysBody
  ): Promise<TSignedRequest> {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_private_keys";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Create a new Sub-Organization
   *
   * Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_sub_organization).
   *
   * See also {@link stampCreateSubOrganization}.
   */
  async createSubOrganization(
    input: TCreateSubOrganizationBody
  ): Promise<TCreateSubOrganizationResponse> {
    return this.request("/public/v1/submit/create_sub_organization", input);
  }

  /**
   * Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.
   *
   * See also {@link CreateSubOrganization}.
   */
  async stampCreateSubOrganization(
    input: TCreateSubOrganizationBody
  ): Promise<TSignedRequest> {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_sub_organization";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Create a user tag and add it to users.
   *
   * Sign the provided `TCreateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_user_tag).
   *
   * See also {@link stampCreateUserTag}.
   */
  async createUserTag(
    input: TCreateUserTagBody
  ): Promise<TCreateUserTagResponse> {
    return this.request("/public/v1/submit/create_user_tag", input);
  }

  /**
   * Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.
   *
   * See also {@link CreateUserTag}.
   */
  async stampCreateUserTag(input: TCreateUserTagBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/create_user_tag";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Create Users in an existing Organization
   *
   * Sign the provided `TCreateUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_users).
   *
   * See also {@link stampCreateUsers}.
   */
  async createUsers(input: TCreateUsersBody): Promise<TCreateUsersResponse> {
    return this.request("/public/v1/submit/create_users", input);
  }

  /**
   * Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.
   *
   * See also {@link CreateUsers}.
   */
  async stampCreateUsers(input: TCreateUsersBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/create_users";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Remove api keys from a User
   *
   * Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_api_keys).
   *
   * See also {@link stampDeleteApiKeys}.
   */
  async deleteApiKeys(
    input: TDeleteApiKeysBody
  ): Promise<TDeleteApiKeysResponse> {
    return this.request("/public/v1/submit/delete_api_keys", input);
  }

  /**
   * Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.
   *
   * See also {@link DeleteApiKeys}.
   */
  async stampDeleteApiKeys(input: TDeleteApiKeysBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_api_keys";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Remove authenticators from a User
   *
   * Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_authenticators).
   *
   * See also {@link stampDeleteAuthenticators}.
   */
  async deleteAuthenticators(
    input: TDeleteAuthenticatorsBody
  ): Promise<TDeleteAuthenticatorsResponse> {
    return this.request("/public/v1/submit/delete_authenticators", input);
  }

  /**
   * Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.
   *
   * See also {@link DeleteAuthenticators}.
   */
  async stampDeleteAuthenticators(
    input: TDeleteAuthenticatorsBody
  ): Promise<TSignedRequest> {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/delete_authenticators";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Delete an existing Invitation
   *
   * Sign the provided `TDeleteInvitationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_invitations).
   *
   * See also {@link stampDeleteInvitation}.
   */
  async deleteInvitation(
    input: TDeleteInvitationBody
  ): Promise<TDeleteInvitationResponse> {
    return this.request("/public/v1/submit/delete_invitations", input);
  }

  /**
   * Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.
   *
   * See also {@link DeleteInvitation}.
   */
  async stampDeleteInvitation(
    input: TDeleteInvitationBody
  ): Promise<TSignedRequest> {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/delete_invitations";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Delete an existing Policy
   *
   * Sign the provided `TDeletePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_policy).
   *
   * See also {@link stampDeletePolicy}.
   */
  async deletePolicy(input: TDeletePolicyBody): Promise<TDeletePolicyResponse> {
    return this.request("/public/v1/submit/delete_policy", input);
  }

  /**
   * Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.
   *
   * See also {@link DeletePolicy}.
   */
  async stampDeletePolicy(input: TDeletePolicyBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_policy";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Reject an Activity
   *
   * Sign the provided `TRejectActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/reject_activity).
   *
   * See also {@link stampRejectActivity}.
   */
  async rejectActivity(
    input: TRejectActivityBody
  ): Promise<TRejectActivityResponse> {
    return this.request("/public/v1/submit/reject_activity", input);
  }

  /**
   * Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.
   *
   * See also {@link RejectActivity}.
   */
  async stampRejectActivity(
    input: TRejectActivityBody
  ): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/reject_activity";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Sign a raw payload with a Private Key
   *
   * Sign the provided `TSignRawPayloadBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payload).
   *
   * See also {@link stampSignRawPayload}.
   */
  async signRawPayload(
    input: TSignRawPayloadBody
  ): Promise<TSignRawPayloadResponse> {
    return this.request("/public/v1/submit/sign_raw_payload", input);
  }

  /**
   * Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.
   *
   * See also {@link SignRawPayload}.
   */
  async stampSignRawPayload(
    input: TSignRawPayloadBody
  ): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_raw_payload";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Sign a transaction with a Private Key
   *
   * Sign the provided `TSignTransactionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_transaction).
   *
   * See also {@link stampSignTransaction}.
   */
  async signTransaction(
    input: TSignTransactionBody
  ): Promise<TSignTransactionResponse> {
    return this.request("/public/v1/submit/sign_transaction", input);
  }

  /**
   * Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.
   *
   * See also {@link SignTransaction}.
   */
  async stampSignTransaction(
    input: TSignTransactionBody
  ): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_transaction";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Update the allowable origins for credentials and requests
   *
   * Sign the provided `TUpdateAllowedOriginsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_allowed_origins).
   *
   * See also {@link stampUpdateAllowedOrigins}.
   */
  async updateAllowedOrigins(
    input: TUpdateAllowedOriginsBody
  ): Promise<TUpdateAllowedOriginsResponse> {
    return this.request("/public/v1/submit/update_allowed_origins", input);
  }

  /**
   * Produce a `SignedRequest` from `TUpdateAllowedOriginsBody` by using the client's `stamp` function.
   *
   * See also {@link UpdateAllowedOrigins}.
   */
  async stampUpdateAllowedOrigins(
    input: TUpdateAllowedOriginsBody
  ): Promise<TSignedRequest> {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/update_allowed_origins";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Update an existing Policy
   *
   * Sign the provided `TUpdatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_policy).
   *
   * See also {@link stampUpdatePolicy}.
   */
  async updatePolicy(input: TUpdatePolicyBody): Promise<TUpdatePolicyResponse> {
    return this.request("/public/v1/submit/update_policy", input);
  }

  /**
   * Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.
   *
   * See also {@link UpdatePolicy}.
   */
  async stampUpdatePolicy(input: TUpdatePolicyBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/update_policy";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
   *
   * Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_private_key_tag).
   *
   * See also {@link stampUpdatePrivateKeyTag}.
   */
  async updatePrivateKeyTag(
    input: TUpdatePrivateKeyTagBody
  ): Promise<TUpdatePrivateKeyTagResponse> {
    return this.request("/public/v1/submit/update_private_key_tag", input);
  }

  /**
   * Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.
   *
   * See also {@link UpdatePrivateKeyTag}.
   */
  async stampUpdatePrivateKeyTag(
    input: TUpdatePrivateKeyTagBody
  ): Promise<TSignedRequest> {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/update_private_key_tag";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Set the threshold and members of the root quorum. This must be approved by the current root quorum.
   *
   * Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_root_quorum).
   *
   * See also {@link stampUpdateRootQuorum}.
   */
  async updateRootQuorum(
    input: TUpdateRootQuorumBody
  ): Promise<TUpdateRootQuorumResponse> {
    return this.request("/public/v1/submit/update_root_quorum", input);
  }

  /**
   * Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.
   *
   * See also {@link UpdateRootQuorum}.
   */
  async stampUpdateRootQuorum(
    input: TUpdateRootQuorumBody
  ): Promise<TSignedRequest> {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/update_root_quorum";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Update a User in an existing Organization
   *
   * Sign the provided `TUpdateUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user).
   *
   * See also {@link stampUpdateUser}.
   */
  async updateUser(input: TUpdateUserBody): Promise<TUpdateUserResponse> {
    return this.request("/public/v1/submit/update_user", input);
  }

  /**
   * Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.
   *
   * See also {@link UpdateUser}.
   */
  async stampUpdateUser(input: TUpdateUserBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }

  /**
   * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
   *
   * Sign the provided `TUpdateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_tag).
   *
   * See also {@link stampUpdateUserTag}.
   */
  async updateUserTag(
    input: TUpdateUserTagBody
  ): Promise<TUpdateUserTagResponse> {
    return this.request("/public/v1/submit/update_user_tag", input);
  }

  /**
   * Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.
   *
   * See also {@link UpdateUserTag}.
   */
  async stampUpdateUserTag(input: TUpdateUserTagBody): Promise<TSignedRequest> {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user_tag";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  }
}
