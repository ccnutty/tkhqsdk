/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */

import {
  request,
  federatedRequest,
  TurnkeyCredentialRequestOptions,
} from "../../../../../base";
import type { operations } from "./public_api.types";

/**
 * `POST /public/v1/query/get_activity`
 */
type TPostGetActivityBody =
  operations["PublicApiService_GetActivity"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/query/get_activity`
 */
export type TPostGetActivityResponse =
  operations["PublicApiService_GetActivity"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/get_activity`
 */
export type TPostGetActivityInput = { body: TPostGetActivityBody };

/**
 * Get Activity
 *
 * Get details about an Activity
 *
 * `POST /public/v1/query/get_activity`
 */
export const postGetActivity = (input: TPostGetActivityInput) =>
  request<TPostGetActivityResponse, TPostGetActivityBody, never, never, never>({
    uri: "/public/v1/query/get_activity",
    method: "POST",
    body: input.body,
  });

/**
 * Get Activity
 *
 * Get details about an Activity
 */
export const federatedPostGetActivity = (
  input: TPostGetActivityInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostGetActivityBody, never, never>({
    uri: "/public/v1/query/get_activity",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/get_organization`
 */
type TPostGetOrganizationBody =
  operations["PublicApiService_GetOrganization"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/query/get_organization`
 */
export type TPostGetOrganizationResponse =
  operations["PublicApiService_GetOrganization"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/get_organization`
 */
export type TPostGetOrganizationInput = { body: TPostGetOrganizationBody };

/**
 * Get Organization
 *
 * Get details about an Organization
 *
 * `POST /public/v1/query/get_organization`
 */
export const postGetOrganization = (input: TPostGetOrganizationInput) =>
  request<
    TPostGetOrganizationResponse,
    TPostGetOrganizationBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/query/get_organization",
    method: "POST",
    body: input.body,
  });

/**
 * Get Organization
 *
 * Get details about an Organization
 */
export const federatedPostGetOrganization = (
  input: TPostGetOrganizationInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostGetOrganizationBody, never, never>({
    uri: "/public/v1/query/get_organization",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/get_policy`
 */
type TPostGetPolicyBody =
  operations["PublicApiService_GetPolicy"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/query/get_policy`
 */
export type TPostGetPolicyResponse =
  operations["PublicApiService_GetPolicy"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/get_policy`
 */
export type TPostGetPolicyInput = { body: TPostGetPolicyBody };

/**
 * Get Policy
 *
 * Get details about a Policy
 *
 * `POST /public/v1/query/get_policy`
 */
export const postGetPolicy = (input: TPostGetPolicyInput) =>
  request<TPostGetPolicyResponse, TPostGetPolicyBody, never, never, never>({
    uri: "/public/v1/query/get_policy",
    method: "POST",
    body: input.body,
  });

/**
 * Get Policy
 *
 * Get details about a Policy
 */
export const federatedPostGetPolicy = (
  input: TPostGetPolicyInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostGetPolicyBody, never, never>({
    uri: "/public/v1/query/get_policy",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/get_private_key`
 */
type TPostGetPrivateKeyBody =
  operations["PublicApiService_GetPrivateKey"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/query/get_private_key`
 */
export type TPostGetPrivateKeyResponse =
  operations["PublicApiService_GetPrivateKey"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/get_private_key`
 */
export type TPostGetPrivateKeyInput = { body: TPostGetPrivateKeyBody };

/**
 * Get Private Key
 *
 * Get details about a Private Key
 *
 * `POST /public/v1/query/get_private_key`
 */
export const postGetPrivateKey = (input: TPostGetPrivateKeyInput) =>
  request<
    TPostGetPrivateKeyResponse,
    TPostGetPrivateKeyBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/query/get_private_key",
    method: "POST",
    body: input.body,
  });

/**
 * Get Private Key
 *
 * Get details about a Private Key
 */
export const federatedPostGetPrivateKey = (
  input: TPostGetPrivateKeyInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostGetPrivateKeyBody, never, never>({
    uri: "/public/v1/query/get_private_key",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/get_user`
 */
type TPostGetUserBody =
  operations["PublicApiService_GetUser"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/query/get_user`
 */
export type TPostGetUserResponse =
  operations["PublicApiService_GetUser"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/get_user`
 */
export type TPostGetUserInput = { body: TPostGetUserBody };

/**
 * Get User
 *
 * Get details about a User
 *
 * `POST /public/v1/query/get_user`
 */
export const postGetUser = (input: TPostGetUserInput) =>
  request<TPostGetUserResponse, TPostGetUserBody, never, never, never>({
    uri: "/public/v1/query/get_user",
    method: "POST",
    body: input.body,
  });

/**
 * Get User
 *
 * Get details about a User
 */
export const federatedPostGetUser = (
  input: TPostGetUserInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostGetUserBody, never, never>({
    uri: "/public/v1/query/get_user",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/list_activities`
 */
type TPostGetActivitiesBody =
  operations["PublicApiService_GetActivities"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/query/list_activities`
 */
export type TPostGetActivitiesResponse =
  operations["PublicApiService_GetActivities"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/list_activities`
 */
export type TPostGetActivitiesInput = { body: TPostGetActivitiesBody };

/**
 * List Activities
 *
 * List all Activities within an Organization
 *
 * `POST /public/v1/query/list_activities`
 */
export const postGetActivities = (input: TPostGetActivitiesInput) =>
  request<
    TPostGetActivitiesResponse,
    TPostGetActivitiesBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/query/list_activities",
    method: "POST",
    body: input.body,
  });

/**
 * List Activities
 *
 * List all Activities within an Organization
 */
export const federatedPostGetActivities = (
  input: TPostGetActivitiesInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostGetActivitiesBody, never, never>({
    uri: "/public/v1/query/list_activities",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/list_policies`
 */
type TPostGetPoliciesBody =
  operations["PublicApiService_GetPolicies"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/query/list_policies`
 */
export type TPostGetPoliciesResponse =
  operations["PublicApiService_GetPolicies"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/list_policies`
 */
export type TPostGetPoliciesInput = { body: TPostGetPoliciesBody };

/**
 * List Policies
 *
 * List all Policies within an Organization
 *
 * `POST /public/v1/query/list_policies`
 */
export const postGetPolicies = (input: TPostGetPoliciesInput) =>
  request<TPostGetPoliciesResponse, TPostGetPoliciesBody, never, never, never>({
    uri: "/public/v1/query/list_policies",
    method: "POST",
    body: input.body,
  });

/**
 * List Policies
 *
 * List all Policies within an Organization
 */
export const federatedPostGetPolicies = (
  input: TPostGetPoliciesInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostGetPoliciesBody, never, never>({
    uri: "/public/v1/query/list_policies",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/list_private_keys`
 */
type TPostGetPrivateKeysBody =
  operations["PublicApiService_GetPrivateKeys"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/query/list_private_keys`
 */
export type TPostGetPrivateKeysResponse =
  operations["PublicApiService_GetPrivateKeys"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/list_private_keys`
 */
export type TPostGetPrivateKeysInput = { body: TPostGetPrivateKeysBody };

/**
 * List Private Keys
 *
 * List all Private Keys within an Organization
 *
 * `POST /public/v1/query/list_private_keys`
 */
export const postGetPrivateKeys = (input: TPostGetPrivateKeysInput) =>
  request<
    TPostGetPrivateKeysResponse,
    TPostGetPrivateKeysBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/query/list_private_keys",
    method: "POST",
    body: input.body,
  });

/**
 * List Private Keys
 *
 * List all Private Keys within an Organization
 */
export const federatedPostGetPrivateKeys = (
  input: TPostGetPrivateKeysInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostGetPrivateKeysBody, never, never>({
    uri: "/public/v1/query/list_private_keys",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/list_users`
 */
type TPostGetUsersBody =
  operations["PublicApiService_GetUsers"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/query/list_users`
 */
export type TPostGetUsersResponse =
  operations["PublicApiService_GetUsers"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/list_users`
 */
export type TPostGetUsersInput = { body: TPostGetUsersBody };

/**
 * List Users
 *
 * List all Users within an Organization
 *
 * `POST /public/v1/query/list_users`
 */
export const postGetUsers = (input: TPostGetUsersInput) =>
  request<TPostGetUsersResponse, TPostGetUsersBody, never, never, never>({
    uri: "/public/v1/query/list_users",
    method: "POST",
    body: input.body,
  });

/**
 * List Users
 *
 * List all Users within an Organization
 */
export const federatedPostGetUsers = (
  input: TPostGetUsersInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostGetUsersBody, never, never>({
    uri: "/public/v1/query/list_users",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/whoami`
 */
type TPostGetWhoamiBody =
  operations["PublicApiService_GetWhoami"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/query/whoami`
 */
export type TPostGetWhoamiResponse =
  operations["PublicApiService_GetWhoami"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/whoami`
 */
export type TPostGetWhoamiInput = { body: TPostGetWhoamiBody };

/**
 * Who am I?
 *
 * Get basic information about your current API user and your organization
 *
 * `POST /public/v1/query/whoami`
 */
export const postGetWhoami = (input: TPostGetWhoamiInput) =>
  request<TPostGetWhoamiResponse, TPostGetWhoamiBody, never, never, never>({
    uri: "/public/v1/query/whoami",
    method: "POST",
    body: input.body,
  });

/**
 * Who am I?
 *
 * Get basic information about your current API user and your organization
 */
export const federatedPostGetWhoami = (
  input: TPostGetWhoamiInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostGetWhoamiBody, never, never>({
    uri: "/public/v1/query/whoami",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/approve_activity`
 */
type TPostApproveActivityBody =
  operations["PublicApiService_ApproveActivity"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/approve_activity`
 */
export type TPostApproveActivityResponse =
  operations["PublicApiService_ApproveActivity"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/approve_activity`
 */
export type TPostApproveActivityInput = { body: TPostApproveActivityBody };

/**
 * Approve Activity
 *
 * Approve an Activity
 *
 * `POST /public/v1/submit/approve_activity`
 */
export const postApproveActivity = (input: TPostApproveActivityInput) =>
  request<
    TPostApproveActivityResponse,
    TPostApproveActivityBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/approve_activity",
    method: "POST",
    body: input.body,
  });

/**
 * Approve Activity
 *
 * Approve an Activity
 */
export const federatedPostApproveActivity = (
  input: TPostApproveActivityInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostApproveActivityBody, never, never>({
    uri: "/public/v1/submit/approve_activity",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_api_keys`
 */
type TPostCreateApiKeysBody =
  operations["PublicApiService_CreateApiKeys"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/create_api_keys`
 */
export type TPostCreateApiKeysResponse =
  operations["PublicApiService_CreateApiKeys"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_api_keys`
 */
export type TPostCreateApiKeysInput = { body: TPostCreateApiKeysBody };

/**
 * Create API Keys
 *
 * Add api keys to an existing User
 *
 * `POST /public/v1/submit/create_api_keys`
 */
export const postCreateApiKeys = (input: TPostCreateApiKeysInput) =>
  request<
    TPostCreateApiKeysResponse,
    TPostCreateApiKeysBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/create_api_keys",
    method: "POST",
    body: input.body,
  });

/**
 * Create API Keys
 *
 * Add api keys to an existing User
 */
export const federatedPostCreateApiKeys = (
  input: TPostCreateApiKeysInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostCreateApiKeysBody, never, never>({
    uri: "/public/v1/submit/create_api_keys",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_api_only_users`
 */
type TPostCreateApiOnlyUsersBody =
  operations["PublicApiService_CreateApiOnlyUsers"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/create_api_only_users`
 */
export type TPostCreateApiOnlyUsersResponse =
  operations["PublicApiService_CreateApiOnlyUsers"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_api_only_users`
 */
export type TPostCreateApiOnlyUsersInput = {
  body: TPostCreateApiOnlyUsersBody;
};

/**
 * Create API-only Users
 *
 * Create API-only Users in an existing Organization
 *
 * `POST /public/v1/submit/create_api_only_users`
 */
export const postCreateApiOnlyUsers = (input: TPostCreateApiOnlyUsersInput) =>
  request<
    TPostCreateApiOnlyUsersResponse,
    TPostCreateApiOnlyUsersBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/create_api_only_users",
    method: "POST",
    body: input.body,
  });

/**
 * Create API-only Users
 *
 * Create API-only Users in an existing Organization
 */
export const federatedPostCreateApiOnlyUsers = (
  input: TPostCreateApiOnlyUsersInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostCreateApiOnlyUsersBody, never, never>({
    uri: "/public/v1/submit/create_api_only_users",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_authenticators`
 */
type TPostCreateAuthenticatorsBody =
  operations["PublicApiService_CreateAuthenticators"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/create_authenticators`
 */
export type TPostCreateAuthenticatorsResponse =
  operations["PublicApiService_CreateAuthenticators"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_authenticators`
 */
export type TPostCreateAuthenticatorsInput = {
  body: TPostCreateAuthenticatorsBody;
};

/**
 * Create Authenticators
 *
 * Create Authenticators to authenticate requests to Turnkey
 *
 * `POST /public/v1/submit/create_authenticators`
 */
export const postCreateAuthenticators = (
  input: TPostCreateAuthenticatorsInput
) =>
  request<
    TPostCreateAuthenticatorsResponse,
    TPostCreateAuthenticatorsBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/create_authenticators",
    method: "POST",
    body: input.body,
  });

/**
 * Create Authenticators
 *
 * Create Authenticators to authenticate requests to Turnkey
 */
export const federatedPostCreateAuthenticators = (
  input: TPostCreateAuthenticatorsInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostCreateAuthenticatorsBody, never, never>({
    uri: "/public/v1/submit/create_authenticators",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_invitations`
 */
type TPostCreateInvitationsBody =
  operations["PublicApiService_CreateInvitations"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/create_invitations`
 */
export type TPostCreateInvitationsResponse =
  operations["PublicApiService_CreateInvitations"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_invitations`
 */
export type TPostCreateInvitationsInput = { body: TPostCreateInvitationsBody };

/**
 * Create Invitations
 *
 * Create Invitations to join an existing Organization
 *
 * `POST /public/v1/submit/create_invitations`
 */
export const postCreateInvitations = (input: TPostCreateInvitationsInput) =>
  request<
    TPostCreateInvitationsResponse,
    TPostCreateInvitationsBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/create_invitations",
    method: "POST",
    body: input.body,
  });

/**
 * Create Invitations
 *
 * Create Invitations to join an existing Organization
 */
export const federatedPostCreateInvitations = (
  input: TPostCreateInvitationsInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostCreateInvitationsBody, never, never>({
    uri: "/public/v1/submit/create_invitations",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_policy`
 */
type TPostCreatePolicyBody =
  operations["PublicApiService_CreatePolicy"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/create_policy`
 */
export type TPostCreatePolicyResponse =
  operations["PublicApiService_CreatePolicy"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_policy`
 */
export type TPostCreatePolicyInput = { body: TPostCreatePolicyBody };

/**
 * Create Policy
 *
 * Create a new Policy
 *
 * `POST /public/v1/submit/create_policy`
 */
export const postCreatePolicy = (input: TPostCreatePolicyInput) =>
  request<
    TPostCreatePolicyResponse,
    TPostCreatePolicyBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/create_policy",
    method: "POST",
    body: input.body,
  });

/**
 * Create Policy
 *
 * Create a new Policy
 */
export const federatedPostCreatePolicy = (
  input: TPostCreatePolicyInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostCreatePolicyBody, never, never>({
    uri: "/public/v1/submit/create_policy",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_private_keys`
 */
type TPostCreatePrivateKeysBody =
  operations["PublicApiService_CreatePrivateKeys"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/create_private_keys`
 */
export type TPostCreatePrivateKeysResponse =
  operations["PublicApiService_CreatePrivateKeys"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_private_keys`
 */
export type TPostCreatePrivateKeysInput = { body: TPostCreatePrivateKeysBody };

/**
 * Create Private Keys
 *
 * Create new Private Keys
 *
 * `POST /public/v1/submit/create_private_keys`
 */
export const postCreatePrivateKeys = (input: TPostCreatePrivateKeysInput) =>
  request<
    TPostCreatePrivateKeysResponse,
    TPostCreatePrivateKeysBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/create_private_keys",
    method: "POST",
    body: input.body,
  });

/**
 * Create Private Keys
 *
 * Create new Private Keys
 */
export const federatedPostCreatePrivateKeys = (
  input: TPostCreatePrivateKeysInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostCreatePrivateKeysBody, never, never>({
    uri: "/public/v1/submit/create_private_keys",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_sub_organization`
 */
type TPostCreateSubOrganizationBody =
  operations["PublicApiService_CreateSubOrganization"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/create_sub_organization`
 */
export type TPostCreateSubOrganizationResponse =
  operations["PublicApiService_CreateSubOrganization"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_sub_organization`
 */
export type TPostCreateSubOrganizationInput = {
  body: TPostCreateSubOrganizationBody;
};

/**
 * Create Sub-Organization
 *
 * Create a new Sub-Organization
 *
 * `POST /public/v1/submit/create_sub_organization`
 */
export const postCreateSubOrganization = (
  input: TPostCreateSubOrganizationInput
) =>
  request<
    TPostCreateSubOrganizationResponse,
    TPostCreateSubOrganizationBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/create_sub_organization",
    method: "POST",
    body: input.body,
  });

/**
 * Create Sub-Organization
 *
 * Create a new Sub-Organization
 */
export const federatedPostCreateSubOrganization = (
  input: TPostCreateSubOrganizationInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostCreateSubOrganizationBody, never, never>({
    uri: "/public/v1/submit/create_sub_organization",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_users`
 *
 * @deprecated
 */
type TPostCreateUsersBody =
  operations["PublicApiService_CreateUsers"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/create_users`
 *
 * @deprecated
 */
export type TPostCreateUsersResponse =
  operations["PublicApiService_CreateUsers"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_users`
 *
 * @deprecated
 */
export type TPostCreateUsersInput = { body: TPostCreateUsersBody };

/**
 * Create Users
 *
 * Create Users in an existing Organization
 *
 * `POST /public/v1/submit/create_users`
 *
 * @deprecated
 */
export const postCreateUsers = (input: TPostCreateUsersInput) =>
  request<TPostCreateUsersResponse, TPostCreateUsersBody, never, never, never>({
    uri: "/public/v1/submit/create_users",
    method: "POST",
    body: input.body,
  });

/**
 * Create Users
 *
 * Create Users in an existing Organization
 *
 * @deprecated
 */
export const federatedPostCreateUsers = (
  input: TPostCreateUsersInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostCreateUsersBody, never, never>({
    uri: "/public/v1/submit/create_users",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/delete_api_keys`
 */
type TPostDeleteApiKeysBody =
  operations["PublicApiService_DeleteApiKeys"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/delete_api_keys`
 */
export type TPostDeleteApiKeysResponse =
  operations["PublicApiService_DeleteApiKeys"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/delete_api_keys`
 */
export type TPostDeleteApiKeysInput = { body: TPostDeleteApiKeysBody };

/**
 * Delete API Keys
 *
 * Remove api keys from a User
 *
 * `POST /public/v1/submit/delete_api_keys`
 */
export const postDeleteApiKeys = (input: TPostDeleteApiKeysInput) =>
  request<
    TPostDeleteApiKeysResponse,
    TPostDeleteApiKeysBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/delete_api_keys",
    method: "POST",
    body: input.body,
  });

/**
 * Delete API Keys
 *
 * Remove api keys from a User
 */
export const federatedPostDeleteApiKeys = (
  input: TPostDeleteApiKeysInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostDeleteApiKeysBody, never, never>({
    uri: "/public/v1/submit/delete_api_keys",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/delete_invitations`
 */
type TPostDeleteInvitationBody =
  operations["PublicApiService_DeleteInvitation"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/delete_invitations`
 */
export type TPostDeleteInvitationResponse =
  operations["PublicApiService_DeleteInvitation"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/delete_invitations`
 */
export type TPostDeleteInvitationInput = { body: TPostDeleteInvitationBody };

/**
 * Delete Invitation
 *
 * Delete an existing Invitation
 *
 * `POST /public/v1/submit/delete_invitations`
 */
export const postDeleteInvitation = (input: TPostDeleteInvitationInput) =>
  request<
    TPostDeleteInvitationResponse,
    TPostDeleteInvitationBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/delete_invitations",
    method: "POST",
    body: input.body,
  });

/**
 * Delete Invitation
 *
 * Delete an existing Invitation
 */
export const federatedPostDeleteInvitation = (
  input: TPostDeleteInvitationInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostDeleteInvitationBody, never, never>({
    uri: "/public/v1/submit/delete_invitations",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/delete_policy`
 */
type TPostDeletePolicyBody =
  operations["PublicApiService_DeletePolicy"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/delete_policy`
 */
export type TPostDeletePolicyResponse =
  operations["PublicApiService_DeletePolicy"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/delete_policy`
 */
export type TPostDeletePolicyInput = { body: TPostDeletePolicyBody };

/**
 * Delete Policy
 *
 * Delete an existing Policy
 *
 * `POST /public/v1/submit/delete_policy`
 */
export const postDeletePolicy = (input: TPostDeletePolicyInput) =>
  request<
    TPostDeletePolicyResponse,
    TPostDeletePolicyBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/delete_policy",
    method: "POST",
    body: input.body,
  });

/**
 * Delete Policy
 *
 * Delete an existing Policy
 */
export const federatedPostDeletePolicy = (
  input: TPostDeletePolicyInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostDeletePolicyBody, never, never>({
    uri: "/public/v1/submit/delete_policy",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/reject_activity`
 */
type TPostRejectActivityBody =
  operations["PublicApiService_RejectActivity"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/reject_activity`
 */
export type TPostRejectActivityResponse =
  operations["PublicApiService_RejectActivity"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/reject_activity`
 */
export type TPostRejectActivityInput = { body: TPostRejectActivityBody };

/**
 * Reject Activity
 *
 * Reject an Activity
 *
 * `POST /public/v1/submit/reject_activity`
 */
export const postRejectActivity = (input: TPostRejectActivityInput) =>
  request<
    TPostRejectActivityResponse,
    TPostRejectActivityBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/reject_activity",
    method: "POST",
    body: input.body,
  });

/**
 * Reject Activity
 *
 * Reject an Activity
 */
export const federatedPostRejectActivity = (
  input: TPostRejectActivityInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostRejectActivityBody, never, never>({
    uri: "/public/v1/submit/reject_activity",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/sign_raw_payload`
 */
type TPostSignRawPayloadBody =
  operations["PublicApiService_SignRawPayload"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/sign_raw_payload`
 */
export type TPostSignRawPayloadResponse =
  operations["PublicApiService_SignRawPayload"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/sign_raw_payload`
 */
export type TPostSignRawPayloadInput = { body: TPostSignRawPayloadBody };

/**
 * Sign Raw Payload
 *
 * Sign a raw payload with a Private Key
 *
 * `POST /public/v1/submit/sign_raw_payload`
 */
export const postSignRawPayload = (input: TPostSignRawPayloadInput) =>
  request<
    TPostSignRawPayloadResponse,
    TPostSignRawPayloadBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/sign_raw_payload",
    method: "POST",
    body: input.body,
  });

/**
 * Sign Raw Payload
 *
 * Sign a raw payload with a Private Key
 */
export const federatedPostSignRawPayload = (
  input: TPostSignRawPayloadInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostSignRawPayloadBody, never, never>({
    uri: "/public/v1/submit/sign_raw_payload",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/sign_transaction`
 */
type TPostSignTransactionBody =
  operations["PublicApiService_SignTransaction"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/sign_transaction`
 */
export type TPostSignTransactionResponse =
  operations["PublicApiService_SignTransaction"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/sign_transaction`
 */
export type TPostSignTransactionInput = { body: TPostSignTransactionBody };

/**
 * Sign Transaction
 *
 * Sign a transaction with a Private Key
 *
 * `POST /public/v1/submit/sign_transaction`
 */
export const postSignTransaction = (input: TPostSignTransactionInput) =>
  request<
    TPostSignTransactionResponse,
    TPostSignTransactionBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/sign_transaction",
    method: "POST",
    body: input.body,
  });

/**
 * Sign Transaction
 *
 * Sign a transaction with a Private Key
 */
export const federatedPostSignTransaction = (
  input: TPostSignTransactionInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostSignTransactionBody, never, never>({
    uri: "/public/v1/submit/sign_transaction",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/update_private_key_tag`
 */
type TPostUpdatePrivateKeyTagBody =
  operations["PublicApiService_UpdatePrivateKeyTag"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/update_private_key_tag`
 */
export type TPostUpdatePrivateKeyTagResponse =
  operations["PublicApiService_UpdatePrivateKeyTag"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/update_private_key_tag`
 */
export type TPostUpdatePrivateKeyTagInput = {
  body: TPostUpdatePrivateKeyTagBody;
};

/**
 * Update Private Key Tag
 *
 * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_private_key_tag`
 */
export const postUpdatePrivateKeyTag = (input: TPostUpdatePrivateKeyTagInput) =>
  request<
    TPostUpdatePrivateKeyTagResponse,
    TPostUpdatePrivateKeyTagBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/update_private_key_tag",
    method: "POST",
    body: input.body,
  });

/**
 * Update Private Key Tag
 *
 * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 */
export const federatedPostUpdatePrivateKeyTag = (
  input: TPostUpdatePrivateKeyTagInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostUpdatePrivateKeyTagBody, never, never>({
    uri: "/public/v1/submit/update_private_key_tag",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/update_root_quorum`
 */
type TPostUpdateRootQuorumBody =
  operations["PublicApiService_UpdateRootQuorum"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/update_root_quorum`
 */
export type TPostUpdateRootQuorumResponse =
  operations["PublicApiService_UpdateRootQuorum"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/update_root_quorum`
 */
export type TPostUpdateRootQuorumInput = { body: TPostUpdateRootQuorumBody };

/**
 * Set the root quorum
 *
 * Set the threshold and members of the root quorum. This must be approved by the current root quorum.
 *
 * `POST /public/v1/submit/update_root_quorum`
 */
export const postUpdateRootQuorum = (input: TPostUpdateRootQuorumInput) =>
  request<
    TPostUpdateRootQuorumResponse,
    TPostUpdateRootQuorumBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/update_root_quorum",
    method: "POST",
    body: input.body,
  });

/**
 * Set the root quorum
 *
 * Set the threshold and members of the root quorum. This must be approved by the current root quorum.
 */
export const federatedPostUpdateRootQuorum = (
  input: TPostUpdateRootQuorumInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostUpdateRootQuorumBody, never, never>({
    uri: "/public/v1/submit/update_root_quorum",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/update_user_tag`
 */
type TPostUpdateUserTagBody =
  operations["PublicApiService_UpdateUserTag"]["parameters"]["body"]["body"];

/**
 * `POST /public/v1/submit/update_user_tag`
 */
export type TPostUpdateUserTagResponse =
  operations["PublicApiService_UpdateUserTag"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/update_user_tag`
 */
export type TPostUpdateUserTagInput = { body: TPostUpdateUserTagBody };

/**
 * Update User Tag
 *
 * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_user_tag`
 */
export const postUpdateUserTag = (input: TPostUpdateUserTagInput) =>
  request<
    TPostUpdateUserTagResponse,
    TPostUpdateUserTagBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/update_user_tag",
    method: "POST",
    body: input.body,
  });

/**
 * Update User Tag
 *
 * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 */
export const federatedPostUpdateUserTag = (
  input: TPostUpdateUserTagInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostUpdateUserTagBody, never, never>({
    uri: "/public/v1/submit/update_user_tag",
    body: input.body,
    options,
  });

/**
 * `POST /tkhq/api/v1/noop-codegen-anchor`
 */
export type TPostNOOPCodegenAnchorResponse =
  operations["PublicApiService_NOOPCodegenAnchor"]["responses"]["200"]["schema"];

/**
 * This route does nothing and does not need an implementation, but please don't remove it.
It's used at compile time for generating extra OpenAPI/TypeScript types
that are not directly referenced in requests.
 *
 * `POST /tkhq/api/v1/noop-codegen-anchor`
 */
export const postNOOPCodegenAnchor = () =>
  request<TPostNOOPCodegenAnchorResponse, never, never, never, never>({
    uri: "/tkhq/api/v1/noop-codegen-anchor",
    method: "POST",
  });

/**
 * This route does nothing and does not need an implementation, but please don't remove it.
It's used at compile time for generating extra OpenAPI/TypeScript types
that are not directly referenced in requests.
 */
export const federatedPostNOOPCodegenAnchor = () =>
  federatedRequest<never, never, never>({
    uri: "/tkhq/api/v1/noop-codegen-anchor",
  });

/**
 * `POST /tkhq/public/v1/query/get_private_key`
 *
 * @deprecated
 */
type TPostGetPrivateKeyBackwardsCompatBody =
  operations["PublicApiService_GetPrivateKeyBackwardsCompat"]["parameters"]["body"]["body"];

/**
 * `POST /tkhq/public/v1/query/get_private_key`
 *
 * @deprecated
 */
export type TPostGetPrivateKeyBackwardsCompatResponse =
  operations["PublicApiService_GetPrivateKeyBackwardsCompat"]["responses"]["200"]["schema"];

/**
 * `POST /tkhq/public/v1/query/get_private_key`
 *
 * @deprecated
 */
export type TPostGetPrivateKeyBackwardsCompatInput = {
  body: TPostGetPrivateKeyBackwardsCompatBody;
};

/**
 * Get Private Key
 *
 * Get details about a Private Key
 *
 * `POST /tkhq/public/v1/query/get_private_key`
 *
 * @deprecated
 */
export const postGetPrivateKeyBackwardsCompat = (
  input: TPostGetPrivateKeyBackwardsCompatInput
) =>
  request<
    TPostGetPrivateKeyBackwardsCompatResponse,
    TPostGetPrivateKeyBackwardsCompatBody,
    never,
    never,
    never
  >({
    uri: "/tkhq/public/v1/query/get_private_key",
    method: "POST",
    body: input.body,
  });

/**
 * Get Private Key
 *
 * Get details about a Private Key
 *
 * @deprecated
 */
export const federatedPostGetPrivateKeyBackwardsCompat = (
  input: TPostGetPrivateKeyBackwardsCompatInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  federatedRequest<TPostGetPrivateKeyBackwardsCompatBody, never, never>({
    uri: "/tkhq/public/v1/query/get_private_key",
    body: input.body,
    options,
  });
